// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package service

import (
	"context"
	"github.com/LyricTian/gin-admin/v10/internal/ddd/rbac/repo"
	"github.com/LyricTian/gin-admin/v10/internal/ddd/rbac/service"
	"github.com/LyricTian/gin-admin/v10/internal/wirex"
	"github.com/LyricTian/gin-admin/v10/pkg/util"
)

// Injectors from wire.go:

func BuildService(ctx context.Context) (*ServiceTest, func(), error) {
	cacher, cleanup, err := wirex.InitCacher(ctx)
	if err != nil {
		return nil, nil, err
	}
	auther, cleanup2, err := wirex.InitAuth(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	db, cleanup3, err := wirex.InitDB(ctx)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userRepo := &repo.UserRepo{
		DB: db,
	}
	userRoleRepo := &repo.UserRoleRepo{
		DB: db,
	}
	menuRepo := &repo.MenuRepo{
		DB: db,
	}
	trans := &util.Trans{
		DB: db,
	}
	userService := &service.UserService{
		Cache:        cacher,
		Trans:        trans,
		UserRepo:     userRepo,
		UserRoleRepo: userRoleRepo,
	}
	authService := &service.AuthService{
		Cache:        cacher,
		Auth:         auther,
		UserRepo:     userRepo,
		UserRoleRepo: userRoleRepo,
		MenuRepo:     menuRepo,
		UserService:  userService,
	}
	serviceTest := &ServiceTest{
		AuthService: authService,
		userService: userService,
	}
	return serviceTest, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
